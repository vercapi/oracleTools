#+TITLE: Oracle Tools

* Docker base  

** Base image

  All docker images are based on oracle-minion. This is an oracleLinux image with a saltstack minion installed on it.
  

*** Building the oracle-minion

    Actually build the base minion

    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/oracle-minion/ :results raw
    docker build -t vercapi/oracle_minion .
    #+END_SRC

    #+RESULTS:
    Sending build context to Docker daemon 4.096 kB
    Step 1 : FROM oraclelinux:7.2
     ---> adf2d3d00fce
    Step 2 : RUN rpm --import https://repo.saltstack.com/yum/redhat/7/x86_64/latest/SALTSTACK-GPG-KEY.pub
     ---> Using cache
     ---> 38ccb5f3786f
    Step 3 : ADD ./saltstack.repo /etc/yum.repos.d/saltstack.repo
     ---> Using cache
     ---> a2b6da9fb63a
    Step 4 : RUN yum -y update && yum -y install salt-minion
     ---> Using cache
     ---> a1b51a63f4b8
    Step 5 : VOLUME ['/etc/salt/minion.d', '/etc/salt/pki/']
     ---> Running in 5b93ff2737aa
     ---> e257e76217b3
    Removing intermediate container 5b93ff2737aa
    Step 6 : COPY minion /etc/salt/minion
     ---> bac30c04f76b
    Removing intermediate container 508a08c9fc5a
    Step 7 : CMD /usr/bin/salt-minion
     ---> Running in ac54b269c8be
     ---> 7f183f108117
    Removing intermediate container ac54b269c8be
    Successfully built 7f183f108117

    

*** Supplying the keys for an vercapi/oracle_minion container

    Generate a key move it to the master and supply it so that the docker image can be build with it.
    Before running the minion we need to setup some directories so that the salt state is persisted when the container is destroyed
    * minion.d is the directory to store configuration

    #+NAME: prep_minion
    #+HEADER: :var minion="minion.oracletools"
    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/oracle-minion/ :results raw
      KEY_NAME=preseed_key
      PUB_KEY_FILE_NAME=$KEY_NAME.pub
      PRIV_KEY_FILE_NAME=$KEY_NAME.pem

      # Prepare the mount points
      MINION_HOME=/srv/docker/volumes/$minion
      mkdir -p $MINION_HOME/etc/salt/minion.d
      mkdir -p $MINION_HOME/etc/salt/pki/minion

      salt-key --gen-keys=$KEY_NAME

      # Copy to master for the minion id $minion
      cp $PUB_KEY_FILE_NAME /etc/salt/pki/master/minions/$minion

      # Copy this to the minion directory
      cp $PRIV_KEY_FILE_NAME $MINION_HOME/etc/salt/pki/minion/minion.pem
      cp $PUB_KEY_FILE_NAME  $MINION_HOME/etc/salt/pki/minion/minion.pub


      # catch
      finish () {
          rm -f $PUB_KEY_FILE_NAME
          rm -f $PRIV_KEY_FILE_NAME
      }

      trap finish EXIT
    #+END_SRC

    #+RESULTS: prep_minion


*** Actually run the container
    
    Test run for the minion. Uses storage for the keys when running
    the bridge is needed so that the minion can connect to the salt master running on the host

    #+HEADER: :var minion="minion.oracletools"
    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/oracle-minion/ :results raw
      docker run -id -h $minion \
             --name $minion \
             -v /srv/docker/volumes/$minion/etc/salt/minion.d:/etc/salt/minion.d \
             -v /srv/docker/volumes/$minion/etc/salt/pki:/etc/salt/pki \
             --net="bridge" \
             vercapi/oracle_minion
    #+END_SRC

    #+RESULTS:
    4d65a45728964c7b4d9c2776e89b9a3a2c97029f7c6ebc71c7b1b0e66f80964a
    

* Database

** Preparation steps

   First run the installer to create a response file. Run ./runInstaller and select 'Save response file' on the bottom of the summary step. (This is the last step before actually installing anything) 
   Dowload the installation files from the Oracle Website. Im' using the 64 bit linux version 12.1.0.2.


** Docker

   For flexibility and avoiding full rebuilds we will create the docker in 2 steps. The first step will be creating a software 
   install on the image. The second will actually create a database. This gives the advantage that we can create different dockers
   with different databases based on the same base docker image with the software install.

*** Build the docker for software only

    This docker image will contain a software only install. It will not have a ready database.

    We will copy the needed files from storage to the Docker image build directory and then remove them again. 
    Note that this image will be a big image so there needs to be enough space on the drive.

    Download of the software needs to happen manually.

    The response file oracleTools/software/database12.1.0.2.0/software/db.rsp contains info like the install directory what users and groups to use.
    You can also configure the starter db here as wel as grid options. None of the are used currently

    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/software/database12.1.0.2.0/software :results raw
      cp /mnt/localData/stage/linuxamd64_12102_database_1of2.zip ./
      cp /mnt/localData/stage/linuxamd64_12102_database_2of2.zip ./

      docker build -t vercapi/oracle_software121 .

      rm linuxamd64_12102_database_1of2.zip && rm linuxamd64_12102_database_2of2.zip
    #+END_SRC

    Running the docker with a shell to see the installation was successful. Starting the DB will not work but you can check the installed files.
    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/software/database12.1.0.2.0/software :results raw
      docker run -i -t vercapi/oracle_software121 /bin/bash
    #+END_SRC

*** Build the docker with DB creation

    The build directory is oracleTools/database12.1.0.2.0/dbca

    This run_db.sh.orig script is a template script that is in charge for starting up the database. The parameters will be correctly set by the create_db script and the file will be place in the docker.
    This is the script that will be run when the docker starts. 
    - It will configure the listener listening on the hostname given on startup, so any hostname can be used to start multiple instances
    - It will then start the listener and the database
    - It will start the saltstack minion

    db_install.dbt.orig is a template file for installing a database with dbca. It will be converted to sb_install.dbt by the create_db.sh and placed on the docker image.

    listener.ora file is also a template that gets converted by create_db.sh so that it can be used by dbca after it has been placed on the docker.

    The create_db.sh script actualy creates a database inside the docker. The parmeters to the scripts can be changed to install another DB.
    The first step sets up the dbca template for the correct parameters. More parameters can be added with additional sed commands to have
    more flexibility.
   
    #+HEADERS: :var p_oracle_sid="orcl" p_oracle_home="/opt/oracle/app/product/12.1.0/dbhome" p_persistent_data="/opt/oracle/oraInventory" p_oracle_base="/opt/oracle/app"
    #+BEGIN_SRC sh :tangle ./database12.1.0.2.0/dbca/create_db.sh :dir ./database12.1.0.2.0/dbca
      #rm db_install.dbt && cp db_install.dbt.orig db_install.dbt
      rm run_db.sh && cp run_db.sh.orig run_db.sh

      sed -i "s/{{ db_create_file_dest }}/\/opt\/oracle\/oraInventory\/$p_oracle_sid/" ./db_install.dbt
      sed -i "s/{{ oracle_base }}/\/opt\/oracle\/app/" ./db_install.dbt
      sed -i "s/{{ database_name }}/$p_oracle_sid/" ./db_install.dbt

      sed -i "s/{{oracle_home}}/$(echo $p_oracle_home | sed 's,/,\\/,g')/" ./run_db.sh
      sed -i "s/{{oracle_sid}}/$p_oracle_sid/" ./run_db.sh
      sed -i "s/{{oracle_base}}/$(echo $p_oracle_base | sed 's,/,\\/,g')/" ./run_db.sh

      docker build --build-arg ORACLE_HOME=$p_oracle_home --build-arg ORACLE_SID=$p_oracle_sid --build-arg ORACLE_BASE=$p_oracle_base -t vercapi/orcl_121 .
    #+END_SRC

    Running the docker with a shell to see the installation was successful
    #+BEGIN_SRC sh :dir /sudo::/home/vercapi/Documents/projects/oracleTools/software/database12.1.0.2.0/software :results raw
      docker run -i -t vercapi/orcl_121 /bin/bash
    #+END_SRC

*** Run the database

    We will prepare the directories so the standard orcl docker container can see the docker. This is only needed when using the salt-minion

    #+CALL: prep_minion(minion="orcl.oracletools") :exports results

    #+RESULTS:

    Note that starting the database this way will remove all data on the moment the contaier is destroyed

    This is for simply starting the DB without using saltstack
    #+HEADER: :var minion="orcl.oracletools"
    #+BEGIN_SRC sh :dir /sudo:root@nitro:/home/vercapi/Documents/projects/oracleTools
      docker run -id -h $minion \
             --name $minion \
             -v /srv/docker/volumes/$minion/etc/salt/minion.d:/etc/salt/minion.d \
             -v /srv/docker/volumes/$minion/etc/salt/pki:/etc/salt/pki \
             -p 1521:1521 \
             --net="bridge" \
             vercapi/orcl_121
    #+END_SRC

    #+RESULTS:
    : 284346f409a2c76b84624a9913719a3e90c73e44af9e5907c7f2af0052c9ab5b

    Hook into the running container
    #+HEADER: :var minion="orcl.oracletools"
    #+BEGIN_SRC sh :dir /sudo:root@nitro:/home/vercapi/Documents/projects/oracleTools
    docker exec -i -t $minion /bin/bash
    #+END_SRC

    Run docker without the saltstack stuff
    #+BEGIN_SRC sh :dir /sudo:root@nitro:/home/vercapi/Documents/projects/oracleTools
    docker run -id -h orcl.oracletools -p 1521:1521 --name orcl vercapi/orcl_121
    #+END_SRC


 
